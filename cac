#!/usr/bin/perl
# Copyright (C) 2019 Christian Meutes <christian.meutes@errxtx.net>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# non-blocking Cisco APIC poller

use warnings;
use strict;
use utf8;
use feature ':5.10';
use IO::Socket;
use POSIX qw(strftime);
use Mojo::DOM;
use Mojo::UserAgent;
use Mojo::Template;
use Mojo::IOLoop::Client;

# apic controllers
my @apics = (
    { name => 'apic-001', ip => '192.0.2.1'  },
    { name => 'apic-002', ip => '192.0.2.2'  },
    { name => 'apic-003', ip => '192.0.2.3'  },
);
# max requests per apic controller in parallel
my $max_req = 10;
# xml output
my $data_path  = "/change/me/";
# apic connection scheme
my $apic_scheme = "https";
# controller credentials
my $apic_credentials = { aaaUser =>
                           { attributes =>
                               { name => 'change', pwd => 'me' }
                           }
                       };
# OpenNMS credentials
my $onms_user = "yyy";
my $onms_pass = "xxx";
# OpenNMS host
my $onms_host = "opennms.mars";
# OpenNMS eventd
my $eventd_host = "eventd.venus";
my $eventd_tcpport = 5817;
# Eventd XML template
my $event_file = "event.xml";
# Interface statistics which should be discarded (intf usage type)
# Empty list collects everything. Use quoted regex (qr/foo/, qr/bar/, qr/notme/)
my @skip_ifusage = (qr/discovery/);

# REST pathes/query strings
my $onms_nodeurl = "http://$onms_user:$onms_pass@$onms_host" .
                   "/opennms/rest/nodes/?foreignId=";
my $login_path   = "/api/aaaLogin.json";
my $polcap_path  = "/api/class/eqptcapacityEntity.xml?" .
                   "query-target=self&" .
                   "rsp-subtree-include=stats&" .
                   "rsp-subtree-class=eqptcapacityPolUsage5min";
my $ifstats_path = "/api/node/mo/topology/pod-1/node-N/sys/phys-N/" .
                   "HDeqptXXXTotal5min-0.xml";
my $fault_path   = "/api/node/class/faultSummary.xml";
my $node_path    = "/api/node/class/fabricNode.xml";
my $intf_path    = "/api/node/class/topology/pod-1/";

## MAIN ##

# {{{ get fqdn of apic nodes
my $ua = new Mojo::UserAgent->new;
my $delay = Mojo::IOLoop::Delay->new;
my $client = Mojo::IOLoop::Client->new;
for my $href (@apics) {
    my @addr = gethostbyname( $href->{name} );
    my $hostname;
    $href->{hostname} = gethostbyaddr( $addr[4], $addr[2] );
    unless ($href->{hostname}) {
        $href->{hostname} = $href->{name};
    }
} # }}}

# {{{ first event loop 
# parallelized but synchronized event queue
Mojo::IOLoop::Delay->new->steps(
    sub {
        my $delay = shift;
        for my $href (@apics) {
            # resolve OpenNMS node IDs
            onms_id( $delay, $ua, $href );
            # login to APIC, set cookie
            apic_login( $delay, $ua, $href );
        }
    },
    sub {
        my $delay = shift;
        for my $href (@apics) {
            # get APIC data and do some cool things
            apic_data( $delay, $ua, $href );
        }
    },
    sub {
        my $delay = shift;
        for my $href (@apics) {
            for my $fault ( @{ $href->{faults} } ) {
                # send event to OpenNMS eventd
                send_event( $delay, $client, $fault, $href->{id},
                            href->{hostname} );
            }
        }
    }
)->wait; 
# }}}

# {{{ Second event loop - get Interface stats
my %intfstats;
# temp hash of arrays per APIC 
my %requests;
for my $href (@apics) {
    for my $node ( @{ $href->{fabricNodes} } ) {
        for my $intf ( @{ $node->{'l1PhysIf'} } ) {
            if ( $intf->{'adminSt'} eq 'up') {
                push @{ $requests{$href->{name}} }, {
                    id => $intf->{'id'},
                    usage => $intf->{'usage'},
                    node => $node->{id},
                    apic => $href->{name},
                    apicip => $href->{ip},
                    dir => 'Ingr'
                };
                push @{ $requests{$href->{name}} }, {
                    id => $intf->{'id'},
                    usage => $intf->{'usage'},
                    node => $node->{id},
                    apic => $href->{name},
                    apicip => $href->{ip},
                    dir => 'Egr'
                };
            }
        }
    }
}

# Start loop of requests, N at max per APIC
# Subsequent requests are started # through callbacks
$delay = Mojo::IOLoop->delay;

for my $interfaces (values %requests) {
    # for each apic controller an array of hashs
    ifstats ( $delay, $ua, $interfaces ) for 1 .. $max_req;
}
$delay->wait;

# {{{ sub Get interface stats, nonblocking recursive callback
sub ifstats {
    my ( $delay, $ua, $queue ) = @_;
    # Stop if no more URLs left in the queue
    return unless my $intf_hash = shift @{ $queue };
    my $nodeid = $intf_hash->{node};
    my $intfid = $intf_hash->{id};
    my $ip = $intf_hash->{apicip};
    my $apic = $intf_hash->{apic};
    my $dir = $intf_hash->{dir};
    my $path = $ifstats_path =~ s/node-N/node-$nodeid/r;
    $path =~ s/phys-N/phys-\[$intfid\]/;
    $path =~ s/XXX/$dir/;
    my $ifstats_url = $apic_scheme."://".$ip.$path;
    # Increment even stack
    my $ifstats_end = $delay->begin;
    $ua->get ( $ifstats_url => { Accept => 'application/xml'} => sub {
        # recursive callback until queue is empty
        my ( $ua, $tx ) = @_;
        if (my $res = $tx->success) {
            my $ifstats_dom = Mojo::DOM->new($tx->res->body);
            my $result = $ifstats_dom->at('eqpt'.$dir.'TotalHist5min');
            if ($result) {
                $intfstats{$apic}->{$nodeid}->{$intfid}->{'eqpt'.$dir.'TotalHist5min'} = $result->attr;
                $intfstats{$apic}->{$nodeid}->{$intfid}->{'eqpt'.$dir.'TotalHist5min-obj'} = $result;
            }
            $ifstats_end->();
            ifstats ( $delay, $ua, $queue );
        } else {
            my $err = $tx->error;
            say "APIC: $intf_hash->{apic}";
            say "Node: $nodeid";
            say "$err->{code} response: $err->{message}" if $err->{code};
            say "Connection error: $err->{message}";
            $ifstats_end->();
            ifstats ( $delay, $ua, $queue );
        }
    });
}
# }}}

# {{{ clean up
for my $href (@apics) {
    for my $node ( @{ $href->{fabricNodes} } ) {
        for my $intf ( @{ $node->{'l1PhysIf'} } ) {
            if ( $intf->{'adminSt'} eq 'up') {
                $intf->{'eqptEgrTotalHist5min'} =
                    $intfstats{$href->{name}}->{$node->{'id'}}->{$intf->{'id'}}->{eqptEgrTotalHist5min};
                $intf->{'eqptIngrTotalHist5min'} =
                    $intfstats{$href->{name}}->{$node->{'id'}}->{$intf->{'id'}}->{eqptIngrTotalHist5min};
            }
        }
    }
}
# }}}
# }}}
    
# {{{ XML creation
my %ifstats;
for my $href (@apics) {
    for my $node ( @{ $href->{fabricNodes} } ) {
        for my $intf ( @{ $node->{'l1PhysIf'} } ) {
            if ( $intf->{'adminSt'} eq 'up' ) {
                # replace interface-id separator / with -
                my $ifid = $intf->{'id'} =~ s/\//-/rg;
                my $id = "node-".$node->{id}."_".$ifid;
                $ifstats{$href->{'name'}}->{$intf->{'usage'}}->{$id}->{'descr'} = $intf->{'descr'};
                # statistics
                for my $attr (keys %{ $intf->{'eqptIngrTotalHist5min'} }) {
                    $ifstats{$href->{'name'}}->{$intf->{'usage'}}->{$id}->{'eqptIngrTotalHist5min'} 
                        .= qq( $attr="$intf->{'eqptIngrTotalHist5min'}->{$attr}");
                }
                for my $attr (keys %{ $intf->{'eqptEgrTotalHist5min'} }) {
                    $ifstats{$href->{'name'}}->{$intf->{'usage'}}->{$id}->{'eqptEgrTotalHist5min'} 
                        .= qq( $attr="$intf->{'eqptEgrTotalHist5min'}->{$attr}");
                }
            }
        }
    }
}
ifstats_xml ( \%ifstats );
# }}}

### MAIN END ##

# {{{ sub ifstats_xml
# create interface stats xml files for OpenNMS
sub ifstats_xml {
    my $ifstats_hashref = shift;
    for my $aref (keys %{ $ifstats_hashref } ) {
        # Create ifstats files for OpenNMS
        my $filename = $data_path."/capacity/interfaces/".$aref.".xml";
        open(my $fh, '>', $filename) or say "Could not open file '$filename' $!";
        if ($fh) {
            my $statsxml= qq(<ifstats>);
            for my $usage (keys %{ $ifstats_hashref->{$aref} } ) {
                my $regex = join '|', @skip_ifusage, '(?!)';
                next if $usage =~ /$regex/;
                for my $id (sort (keys %{ $ifstats_hashref->{$aref}->{$usage} })) {
                    my $ingress = $ifstats_hashref->{$aref}->{$usage}->{$id}->{'eqptIngrTotalHist5min'};
                    my $egress = $ifstats_hashref->{$aref}->{$usage}->{$id}->{'eqptEgrTotalHist5min'};
                    my $descr  = $ifstats_hashref->{$aref}->{$usage}->{$id}->{'descr'};
                    $descr = " - " unless $descr;
                    if ( $ingress or $egress ) {
                        $statsxml .= qq(  <id nodeIf="$id" usage="$usage" descr="$descr" >);
                        $statsxml .= qq(    <eqptIngrTotalHist5min$ingress />);
                        $statsxml .= qq(    <eqptEgrTotalHist5min$egress />);
                        $statsxml .= qq(  </id>);
                    }
                }
            }
            $statsxml .= qq(</ifstats>);
            print $fh $statsxml;
            close $fh;
        } else {
            say "Oops, something went wrong, can't create interface data";
        }
    }
}
# }}}

# sub apic_login {{{
sub apic_login {
    my ( $delay, $ua, $aref ) = @_;
    my $url = $apic_scheme."://".$aref->{ip}.$login_path;
    # Create event counter / increment even stack
    my $end = $delay->begin;
    $ua->post ($url => json => $apic_credentials => sub {
        # Callback
        my ( $ua, $tx ) = @_;
        if (my $res = $tx->success) {
            # decrement event counter
            $end->();
        } else {
            my $err = $tx->error;
            say "$err->{code} response: $err->{message}" if $err->{code};
            say "Connection error: $err->{message}";
            # decrement event counter
            $end->();
        }
    });
}
# }}}

# {{{ sub apic_data
sub apic_data {
    my ( $delay, $ua, $aref ) = @_;
    # start policer-capacity
    pol_capacity ( $delay, $ua, $aref );
    # start faults
    faults ( $delay, $ua, $aref );
    # start nodes & interface data
    node_intf ( $delay, $ua, $aref );
}
# }}}
    
# sub ua_get {{{
sub ua_get {
    my ( $delay, $ua, $url, $aref, $helper ) = @_;
    # Create event counter / increment even stack
    my $end = $delay->begin;
    $ua->get ($url => { Accept => 'application/xml'} => sub {
        # Callback
        my ( $ua, $tx ) = @_;
        if (my $res = $tx->success) {
            # use helper function to do individual things
            $helper->( $delay, $ua, $tx, $aref );
            #decrement event counter
            $end->();
        } else {
            my $err = $tx->error;
            say "$err->{code} response: $err->{message}" if $err->{code};
            say "Connection error: $err->{message}";
            #decrement event counter
            $end->();
        }
    });
}
# }}}

# {{{ sub pol-capacity
sub pol_capacity {
    my ( $delay, $ua, $aref ) = @_;
    my $helper = sub {
        my ( $delay, $ua, $tx, $aref ) = @_;
        # Replace full DN in capacity data with simple DN
        my $dom = Mojo::DOM->new($tx->res->body);
        for my $el ($dom->find('eqptcapacityEntity')->each) {
            $el->attr->{dn} =~ s/.*?\/(node-\d+).*/$1/;
        }
        # Create pol_capacity files for OpenNMS
        my $filename = $data_path."/capacity/policer-cam/".$aref->{name}."-pol-capacity.xml";
        open(my $fh, '>', $filename) or say "Could not open file '$filename' $!";
        if ($fh & $dom) {
            print $fh $dom->to_string;
            close $fh;
        } else {
            say "Oops, something went wrong, can't create policer capacity data";
        }
    };
    my $polcap_url = $apic_scheme."://".$aref->{ip}.$polcap_path;
    # non-blocking call to ua_get()
    ua_get( $delay, $ua, $polcap_url, $aref, $helper );
}
# }}}

# {{{ sub faults
sub faults {
    my ( $delay, $ua, $aref ) = @_;
    # fault code
    my $helper = sub {
        my ( $delay, $ua, $tx, $aref ) = @_;
        my $dom = Mojo::DOM->new($tx->res->body);
        for my $el ($dom->find('faultSummary')->each) {
            # ('Mojo::DOM::HTML' object)
            push @{ $aref->{faults} }, $el;
        }
    };
    my $fault_url = $apic_scheme."://".$aref->{ip}.$fault_path;
    # non-blocking call to ua_get()
    ua_get( $delay, $ua, $fault_url, $aref, $helper );
}
# }}}
    
# {{{ sub nodes 
sub nodes {
    my ( $delay, $ua, $aref ) = @_;
    my $intf_helper = sub {
        my ( $delay, $ua, $tx, $apic_node ) = @_;
        my ( $node, $aref ) = ( $apic_node->{node}, $apic_node->{apic} );
        my $attr = { %{ $node->attr } };
        my $intf_dom = Mojo::DOM->new($tx->res->body);
        # Iterate over all interfaces
        for my $intf ($intf_dom->find('l1PhysIf')->each) {
            push @{$attr->{l1PhysIf}}, $intf->attr;
        }
        push @{$aref->{fabricNodes}}, $attr;
    };
    my $helper = sub {
        my ( $delay, $ua, $tx, $aref ) = @_;
        my $dom = Mojo::DOM->new($tx->res->body);
        # Iterate over all nodes
        for my $node ($dom->find('fabricNode')->each) {
            # Get all interfaces of the node
            my $intf_url = $apic_scheme."://".$aref->{ip}.$intf_path."node-".$node->{id}."/l1PhysIf.xml";
            my $apic_node = { apic => $aref, node => $node };
            ua_get( $delay, $ua, $intf_url, $apic_node, $intf_helper );
        }
    };
    my $node_url = $apic_scheme."://".$aref->{ip}.$node_path;
    # non-blocking call to ua_get()
    ua_get( $delay, $ua, $node_url, $aref, $helper );
}
# }}}

# {{{ sub node_intf 
sub node_intf {
    my ( $delay, $ua, $aref ) = @_;
    my $node_url = $apic_scheme."://".$aref->{ip}.$node_path;
    # Increment event stack
    my $end = $delay->begin;
    $ua->get ( $node_url => { Accept => 'application/xml'} => sub {
        # callback #1
        my ( $ua, $tx ) = @_;
        if (my $res = $tx->success) {
            my $dom = Mojo::DOM->new($tx->res->body);
            # Iterate over all nodes
            for my $node ($dom->find('fabricNode')->each) {
                # Consider only active nodes
                next if $node->{fabricSt} ne "active";
                my $intf_url = $apic_scheme."://".$aref->{ip}.$intf_path."node-".$node->{id}."/l1PhysIf.xml";
                # Increment even stack
                my $intf_end = $delay->begin;
                # Get all interfaces of the node
                $ua->get ( $intf_url => { Accept => 'application/xml'} => sub {
                    # callback #2
                    my ( $ua, $tx ) = @_;
                    if (my $res = $tx->success) {
                        my $attr = { %{ $node->attr } };
                        my $intf_dom = Mojo::DOM->new($tx->res->body);
                        # Iterate over all interfaces
                        for my $intf ($intf_dom->find('l1PhysIf')->each) {
                            push @{$attr->{l1PhysIf}}, $intf->attr;
                        }
                        # Push node hash as array element to apic node
                        push @{$aref->{fabricNodes}}, $attr;
                        # Decrement event counter
                        $intf_end->();
                    } else {
                        my $err = $tx->error;
                        say "APIC: $aref->{name}";
                        say "Node: $node->{id}";
                        say "$err->{code} response: $err->{message}" if $err->{code};
                        say "Connection error: $err->{message}";
                        # Decrement event counter
                        $intf_end->();
                    }
                });
            }
            # Decrement event counter
            $end->();
        } else {
            my $err = $tx->error;
            say "APIC: $aref->{name}";
            say "$err->{code} response: $err->{message}" if $err->{code};
            say "Connection error: $err->{message}";
            # Decrement event counter
            $end->();
        }
    });
}
# }}}

# {{{ sub onms_id 
sub onms_id {
    my ( $delay, $ua, $aref ) = @_;
    my $helper = sub {
        my ( $delay, $ua, $tx, $aref ) = @_;
        # set id
        my $dom = Mojo::DOM->new($tx->res->body);
        $aref->{id} = $dom->at('nodes > node')->attr('id');
    };
    my $onms_url = $onms_nodeurl.$aref->{name};
    # non-blocking call to ua_get()
    ua_get( $delay, $ua, $onms_url, $aref, $helper );
}
# }}}

# {{{ sub send_event 
sub send_event {
    my ( $delay, $client, $fault, $node_id, $hostname ) = @_;
    my $time = strftime '%A, %d %B %Y %-H:%M:%S o\'clock GMT', gmtime();
    # map apic severity 'info' to opennms 'normal'
    my $severity = $fault->attr->{'severity'};
    if ($severity eq "info") {
        $severity = 'normal';
    }
    $severity = ucfirst(lc($severity));
    my $mt = Mojo::Template->new;
    my $event = $mt->render_file($event_file, $fault, $node_id, $hostname, $severity, $time );
    # send to Eventd
    my $socket = IO::Socket::INET->new(
        PeerAddr => $eventd_host,
        PeerPort => $eventd_tcpport,
        Proto => "tcp",
        Type => SOCK_STREAM
    ) or say "Couldn't connect to $eventd_host:$eventd_tcpport - $@\n";
    if ($socket) {
        print $socket $event;
        $socket->close();
    }
}
# }}}

